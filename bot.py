import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import aiosqlite
import os
from datetime import datetime, timedelta, time
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
import random
from aiogram.types import ReplyKeyboardRemove
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import logging
import pytz

API_TOKEN = '7690462834:AAG1zWXVzYB2yKvNG5fyQiARWYwxBgsrCtk'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

DB_PATH = 'bot_db.sqlite3'

router = Router()

class RegStates(StatesGroup):
    full_name = State()
    birthday = State()
    wish = State()
    edit_menu = State()
    edit_full_name = State()
    edit_birthday = State()
    edit_wish = State()

REMINDER_OFFSETS = [21, 14, 7, 3, 1]  # –¥–Ω–µ–π –¥–æ –î–†
scheduler = AsyncIOScheduler()

USER_COMMANDS = [
    '/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    '/me ‚Äî –º–æ–∏ –¥–∞–Ω–Ω—ã–µ',
    '/ward ‚Äî –º–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π',
    '/edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
    '/menu ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
    '/help ‚Äî –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'
]
ADMIN_COMMANDS = [
    '/admin_users ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '/admin_set [giver_id] [ward_id] ‚Äî –≤—Ä—É—á–Ω—É—é –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–∞—Ä—É',
    '/admin_set_name <–§–ò–û_–¥–∞—Ä–∏—Ç–µ–ª—è> <–§–ò–û_–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–∞—Ä—É –ø–æ –§–ò–û',
    '/admin_random ‚Äî —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä',
    '/admin_reminders ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
    '/admin_pairs ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä',
    '/make_admin <telegram_id> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º',
    '/admin_delete <telegram_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '/admin ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥'
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='event_log.txt',
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
    encoding='utf-8'
)

MSK = pytz.timezone('Europe/Moscow')

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                full_name TEXT,
                birthday TEXT,
                wish TEXT,
                ward_id INTEGER,
                giver_id INTEGER,
                is_admin INTEGER DEFAULT 0,
                registered_at TEXT
            )
        ''')
        await db.commit()

@router.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT * FROM users WHERE telegram_id = ?', (message.from_user.id,))
        user = await cursor.fetchone()
        if user:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit')
            logging.info(f"/start –ø–æ–≤—Ç–æ—Ä–Ω–æ: telegram_id={message.from_user.id}")
        else:
            welcome_text = (
                'üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n'
                '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ "–¢–∞–π–Ω—ã–π –¥–∞—Ä–∏—Ç–µ–ª—å" –Ω–∞ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
                '–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å, –∫–æ–º—É –≤—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏ –∫–æ–≥–¥–∞.\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                '–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –∏–ª–∏ /help.'
            )
            await message.answer(welcome_text, parse_mode='HTML')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
            await state.set_state(RegStates.full_name)
            logging.info(f"/start —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: telegram_id={message.from_user.id}")

@router.message(RegStates.full_name)
async def reg_full_name(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.')
        return
    await state.update_data(full_name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):')
    await state.set_state(RegStates.birthday)

@router.message(RegStates.birthday)
async def reg_birthday(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, '%d.%m.%Y')
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
        return
    await state.update_data(birthday=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É:')
    await state.set_state(RegStates.wish)

@router.message(RegStates.wish)
async def reg_wish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''INSERT INTO users (telegram_id, full_name, birthday, wish, registered_at) VALUES (?, ?, ?, ?, ?)''',
            (message.from_user.id, data['full_name'], data['birthday'], message.text, datetime.now().isoformat()))
        await db.commit()
    logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: telegram_id={message.from_user.id}, –§–ò–û={data['full_name']}, birthday={data['birthday']}, wish={message.text}")
    await state.clear()
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –∏–ª–∏ /help.')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command('edit'))
async def edit_profile(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û')],
        [KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è')],
        [KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ], resize_keyboard=True)
    await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb)
    await state.set_state(RegStates.edit_menu)

@router.message(RegStates.edit_menu)
async def edit_menu_handler(message: types.Message, state: FSMContext):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(RegStates.edit_full_name)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(RegStates.edit_birthday)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(RegStates.edit_wish)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.')

@router.message(RegStates.edit_full_name)
async def edit_full_name(message: types.Message, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('UPDATE users SET full_name = ? WHERE telegram_id = ?', (message.text, message.from_user.id))
        await db.commit()
    await state.clear()
    await message.answer('–§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')

@router.message(RegStates.edit_birthday)
async def edit_birthday(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, '%d.%m.%Y')
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('UPDATE users SET birthday = ? WHERE telegram_id = ?', (message.text, message.from_user.id))
        await db.commit()
    await state.clear()
    await message.answer('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')

@router.message(RegStates.edit_wish)
async def edit_wish(message: types.Message, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('UPDATE users SET wish = ? WHERE telegram_id = ?', (message.text, message.from_user.id))
        await db.commit()
    await state.clear()
    await message.answer('–ü–æ–∂–µ–ª–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')

@router.message(Command('ward'))
async def show_ward(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT ward_id FROM users WHERE telegram_id = ?', (message.from_user.id,))
        user = await cursor.fetchone()
        if not user or not user[0]:
            await message.answer('–í–∞–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥–æ–ø–µ—á–Ω—ã–π.')
            return
        cursor = await db.execute('SELECT full_name, birthday, wish FROM users WHERE id = ?', (user[0],))
        ward = await cursor.fetchone()
        if not ward:
            await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return
        await message.answer(f'–í–∞—à –ø–æ–¥–æ–ø–µ—á–Ω—ã–π: {ward[0]}\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {ward[1]}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {ward[2]}')

@router.message(Command('me'))
async def show_my_data(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT full_name, birthday, wish FROM users WHERE telegram_id = ?', (message.from_user.id,))
        user = await cursor.fetchone()
        if not user:
            await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
            return
        await message.answer(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {user[0]}\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user[1]}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {user[2]}')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(telegram_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT is_admin FROM users WHERE telegram_id = ?', (telegram_id,))
        user = await cursor.fetchone()
        return user and user[0] == 1

@router.message(Command('admin_users'))
async def admin_list_users(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT id, full_name, birthday, wish, telegram_id, is_admin, ward_id, giver_id FROM users')
        users = await cursor.fetchall()
        if not users:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.')
            return
        text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n'
        for u in users:
            text += (f"ID: {u[0]}\n–§–ò–û: {u[1]}\n–î–†: {u[2]}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {u[3]}\nTG: {u[4]}\n–ê–¥–º–∏–Ω: {u[5]}\n–ü–æ–¥–æ–ø–µ—á–Ω—ã–π: {u[6]}\n–î–∞—Ä–∏—Ç–µ–ª—å: {u[7]}\n---\n")
        await message.answer(text)

@router.message(Command('admin_set'))
async def admin_set_pair(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    args = message.text.split()
    if len(args) != 3:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_set [giver_id] [ward_id]')
        return
    giver_id, ward_id = args[1], args[2]
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE users SET ward_id = ? WHERE id = ?', (ward_id, giver_id))
        await db.execute('UPDATE users SET giver_id = ? WHERE id = ?', (giver_id, ward_id))
        await db.commit()
    logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã –≤—Ä—É—á–Ω—É—é: giver_id={giver_id}, ward_id={ward_id}, by={message.from_user.id}")
    await clear_all_reminders()
    await schedule_all_reminders()
    await message.answer(f'–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {giver_id} –¥–∞—Ä–∏—Ç {ward_id}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')

@router.message(Command('admin_random'))
async def admin_random_assign(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT id FROM users')
        users = await cursor.fetchall()
        user_ids = [u[0] for u in users]
        if len(user_ids) < 2:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.')
            return
        for attempt in range(1000):
            random.shuffle(user_ids)
            shifted = user_ids[1:] + user_ids[:1]
            has_reverse = False
            pair_map = {giver: ward for giver, ward in zip(user_ids, shifted)}
            for giver, ward in pair_map.items():
                if pair_map.get(ward) == giver:
                    has_reverse = True
                    break
            if not has_reverse:
                break
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            logging.warning(f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ—Å–ª–µ 1000 –ø–æ–ø—ã—Ç–æ–∫")
            return
        for giver, ward in zip(user_ids, shifted):
            await db.execute('UPDATE users SET ward_id = ? WHERE id = ?', (ward, giver))
            await db.execute('UPDATE users SET giver_id = ? WHERE id = ?', (giver, ward))
        await db.commit()
    logging.info(f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—Ä—É–≥—É (–±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –ø–∞—Ä): {user_ids}")
    await clear_all_reminders()
    await schedule_all_reminders()
    await message.answer('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')

@router.message(Command('admin_set_name'))
async def admin_set_pair_by_name(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    args = message.text.split(maxsplit=2)
    if len(args) != 3:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_set_name <–§–ò–û_–¥–∞—Ä–∏—Ç–µ–ª—è> <–§–ò–û_–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ>')
        return
    giver_name, ward_name = args[1], args[2]
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT id FROM users WHERE full_name = ?', (giver_name,))
        giver = await cursor.fetchone()
        cursor = await db.execute('SELECT id FROM users WHERE full_name = ?', (ward_name,))
        ward = await cursor.fetchone()
        if not giver or not ward:
            await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω(—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–∏) —Å —Ç–∞–∫–∏–º –§–ò–û.')
            return
        await db.execute('UPDATE users SET ward_id = ? WHERE id = ?', (ward[0], giver[0]))
        await db.execute('UPDATE users SET giver_id = ? WHERE id = ?', (giver[0], ward[0]))
        await db.commit()
    logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã –ø–æ –§–ò–û: giver={giver_name}, ward={ward_name}, by={message.from_user.id}")
    await clear_all_reminders()
    await schedule_all_reminders()
    await message.answer(f'–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {giver_name} –¥–∞—Ä–∏—Ç {ward_name}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')

@router.message(Command('admin_pairs'))
async def admin_pairs(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT u1.full_name, u2.full_name, u2.birthday FROM users u1 LEFT JOIN users u2 ON u1.ward_id = u2.id')
        pairs = await cursor.fetchall()
        if not pairs:
            await message.answer('–ü–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            return
        text = '<b>–¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä:</b>\n\n'
        for giver, ward, bday in pairs:
            if ward:
                text += f'–î–∞—Ä–∏—Ç–µ–ª—å: <b>{giver}</b> ‚Äî –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{ward}</b> (–î–†: {bday})\n'
            else:
                text += f'–î–∞—Ä–∏—Ç–µ–ª—å: <b>{giver}</b> ‚Äî –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <i>–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</i>\n'
        await message.answer(text, parse_mode='HTML')

@router.message(Command('admin_reminders'))
async def admin_reminders(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    jobs = scheduler.get_jobs()
    if not jobs:
        await message.answer('–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
        return
    text = '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n'
    for job in jobs:
        args = job.args
        if len(args) == 3:
            giver_id, ward_id, days_before = args
            text += f'–î–∞—Ä–∏—Ç–µ–ª—å ID: {giver_id}, –ü–æ–¥–æ–ø–µ—á–Ω—ã–π ID: {ward_id}, –∑–∞ {days_before} –¥–Ω., –¥–∞—Ç–∞: {job.next_run_time}\n'
    await message.answer(text)

@router.message(Command('help'))
async def help_command(message: types.Message):
    is_admin_flag = await is_admin(message.from_user.id)
    text = (
        'üéâ <b>–ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ä–∏—Ç–µ–ª–µ–π –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n'
        '<b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n'
        '1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.\n'
        '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n'
        '3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /me –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n'
        '4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ward, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–æ–º—É –≤—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫.\n'
        '5. –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî /edit.\n'
        '6. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ‚Äî /menu.\n'
        '\n'
    )
    if is_admin_flag:
        text += (
            '<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n'
            '‚Ä¢ /admin_users ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n'
            '‚Ä¢ /admin_set [giver_id] [ward_id] ‚Äî –≤—Ä—É—á–Ω—É—é –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–∞—Ä—É.\n'
            '‚Ä¢ /admin_set_name <–§–ò–û_–¥–∞—Ä–∏—Ç–µ–ª—è> <–§–ò–û_–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–∞—Ä—É –ø–æ –§–ò–û.\n'
            '‚Ä¢ /admin_random ‚Äî —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä.\n'
            '‚Ä¢ /admin_reminders ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n'
            '‚Ä¢ /admin_pairs ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä.\n'
            '‚Ä¢ /make_admin <telegram_id> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º.\n'
            '‚Ä¢ /admin_delete <telegram_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
            '‚Ä¢ /admin ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥.\n'
        )
    text += (
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –∑–∞ 21, 14, 7, 3 –∏ 1 –¥–µ–Ω—å.\n'
    )
    await message.answer(text, parse_mode='HTML')

@router.message(Command('menu'))
async def menu_command(message: types.Message):
    is_admin_flag = await is_admin(message.from_user.id)
    text = '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
    text += '\n'.join(USER_COMMANDS)
    if is_admin_flag:
        text += '\n\n<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n' + '\n'.join(ADMIN_COMMANDS)
    await message.answer(text, parse_mode='HTML')

@router.message(Command('make_admin'))
async def make_admin_command(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤.')
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /make_admin <telegram_id>')
        return
    tg_id = int(args[1])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT id FROM users WHERE telegram_id = ?', (tg_id,))
        user = await cursor.fetchone()
        if not user:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        await db.execute('UPDATE users SET is_admin = 1 WHERE telegram_id = ?', (tg_id,))
        await db.commit()
    logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω: telegram_id={tg_id} (–Ω–∞–∑–Ω–∞—á–∏–ª {message.from_user.id})")
    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.')

@router.message(Command('admin_delete'))
async def admin_delete_user(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_delete <telegram_id>')
        return
    tg_id = int(args[1])
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT id FROM users WHERE telegram_id = ?', (tg_id,))
        user = await cursor.fetchone()
        if not user:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        await db.execute('DELETE FROM users WHERE telegram_id = ?', (tg_id,))
        await db.commit()
    logging.info(f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: telegram_id={tg_id} (—É–¥–∞–ª–∏–ª {message.from_user.id})")
    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg_id} —É–¥–∞–ª—ë–Ω.')

@router.message(Command('admin'))
async def admin_commands(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    text = '–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n' + '\n'.join(ADMIN_COMMANDS)
    await message.answer(text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞

dp.include_router(router)

async def schedule_all_reminders():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT id, birthday, giver_id FROM users WHERE giver_id IS NOT NULL')
        users = await cursor.fetchall()
        for user_id, birthday, giver_id in users:
            if not birthday or not giver_id:
                continue
            bday = datetime.strptime(birthday, '%d.%m.%Y')
            now = datetime.now(MSK)
            this_year = bday.replace(year=now.year)
            if this_year.date() < now.date():
                this_year = this_year.replace(year=now.year + 1)
            for days_before in REMINDER_OFFSETS:
                remind_date = this_year - timedelta(days=days_before)
                remind_dt = datetime.combine(remind_date, time(12, 0))
                remind_dt = MSK.localize(remind_dt)
                if remind_dt > now:
                    scheduler.add_job(send_reminder, DateTrigger(run_date=remind_dt), args=[giver_id, user_id, days_before])

async def send_reminder(giver_id, ward_id, days_before):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT full_name, birthday, wish FROM users WHERE id = ?', (ward_id,))
        ward = await cursor.fetchone()
        if not ward:
            return
        text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ {ward[0]} –æ—Å—Ç–∞–ª–æ—Å—å {days_before} –¥–Ω.\n–î–†: {ward[1]}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {ward[2]}"
        cursor = await db.execute('SELECT telegram_id FROM users WHERE id = ?', (giver_id,))
        giver = await cursor.fetchone()
        if giver:
            try:
                await bot.send_message(giver[0], text)
            except Exception:
                pass

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def clear_all_reminders():
    for job in scheduler.get_jobs():
        job.remove()

async def main():
    await init_db()
    scheduler.start()
    await schedule_all_reminders()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 