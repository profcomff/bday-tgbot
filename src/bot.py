import asyncio
import logging
import random
from datetime import date, datetime, time, timedelta

import pytz
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from src.database.db import db
from src.utils.settings import get_settings

logging.basicConfig(
    filename="event_log.txt",
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    encoding="utf-8",
)

settings = get_settings()
bot = Bot(token=settings.API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


class RegStates(StatesGroup):
    full_name = State()
    birthday = State()
    wish = State()
    edit_menu = State()
    edit_full_name = State()
    edit_birthday = State()
    edit_wish = State()


REMINDER_OFFSETS = settings.REMINDER_OFFSETS
scheduler = AsyncIOScheduler()
MSK = pytz.timezone("Europe/Moscow")

USER_COMMANDS = [
    "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "/me ‚Äî –º–æ–∏ –¥–∞–Ω–Ω—ã–µ",
    "/ward ‚Äî –º–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π",
    "/edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
    "/menu ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    "/help ‚Äî –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
]

ADMIN_COMMANDS = [
    "/users ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "/set [giver_id] [ward_id] ‚Äî –≤—Ä—É—á–Ω—É—é –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–∞—Ä—É",
    "/set_name [–§–ò–û_–¥–∞—Ä–∏—Ç–µ–ª—è] [–§–ò–û_–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ] ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ –§–ò–û",
    "/random ‚Äî —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä",
    "/reminders ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
    "/pairs ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä",
    "/make_admin [telegram_id] ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º",
    "/admin_revoke [telegram_id] ‚Äî –ª–∏—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞",
    "/delete [telegram_id] ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "/reset [user_id] ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
]


def format_bday(bday: date | None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    if not bday:
        return "‚Äî"
    return bday.strftime("%d.%m.%Y")


# ===== –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ =====


# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT * FROM users WHERE telegram_id = $1", message.from_user.id
        )

    if user:
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit"
        )
        logging.info(f"/start –ø–æ–≤—Ç–æ—Ä–Ω–æ: telegram_id={message.from_user.id}")
    else:
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ "–¢–∞–π–Ω—ã–π –¥–∞—Ä–∏—Ç–µ–ª—å" –Ω–∞ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
            "–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å, –∫–æ–º—É –≤—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏ –∫–æ–≥–¥–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –∏–ª–∏ /help."
        )
        await message.answer(welcome_text, parse_mode="HTML")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(RegStates.full_name)
        logging.info(f"/start —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: telegram_id={message.from_user.id}")


@router.message(RegStates.full_name)
async def reg_full_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    if message.text.startswith("/"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì):")
    await state.set_state(RegStates.birthday)


@router.message(RegStates.birthday)
async def reg_birthday(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        b = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return
    await state.update_data(birthday=b)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É:")
    await state.set_state(RegStates.wish)


@router.message(RegStates.wish)
async def reg_wish(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    async with db.pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (telegram_id, full_name, birthday, wish, registered_at)
            VALUES ($1, $2, $3, $4, NOW())
            """,
            message.from_user.id,
            data["full_name"],
            data["birthday"],
            message.text,
        )
    logging.info(
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: telegram_id={message.from_user.id}, –§–ò–û={data['full_name']}"
    )
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –∏–ª–∏ /help."
    )


# --- –ü–û–ö–ê–ó –î–ê–ù–ù–´–• ---
@router.message(Command("me"))
async def show_my_data(message: types.Message):
    """–ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT full_name, birthday, wish FROM users WHERE telegram_id = $1",
            message.from_user.id,
        )

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    await message.answer(
        f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {user["full_name"]}\n'
        f'–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {format_bday(user["birthday"])}\n'
        f'–ü–æ–∂–µ–ª–∞–Ω–∏—è: {user["wish"]}'
    )


@router.message(Command("ward"))
async def show_ward(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    async with db.pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT ward_id FROM users WHERE telegram_id = $1", message.from_user.id
        )

        if not row or not row.get("ward_id"):
            await message.answer("–í–∞–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–¥–æ–ø–µ—á–Ω—ã–π.")
            return

        ward_id = row["ward_id"]
        ward = await conn.fetchrow(
            "SELECT full_name, birthday, wish FROM users WHERE id = $1", ward_id
        )

    if not ward:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await message.answer(
        f'–í–∞—à –ø–æ–¥–æ–ø–µ—á–Ω—ã–π: {ward["full_name"]}\n'
        f'–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {format_bday(ward["birthday"])}\n'
        f'–ü–æ–∂–µ–ª–∞–Ω–∏—è: {ward["wish"]}'
    )


# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ---
@router.message(Command("edit"))
async def edit_profile(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")],
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")],
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await state.set_state(RegStates.edit_menu)


@router.message(RegStates.edit_menu)
async def edit_menu_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegStates.edit_full_name)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.MM.–ì–ì–ì–ì):",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.set_state(RegStates.edit_birthday)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegStates.edit_wish)
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")


@router.message(RegStates.edit_full_name)
async def edit_full_name(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û"""
    async with db.pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET full_name = $1 WHERE telegram_id = $2",
            message.text,
            message.from_user.id,
        )
    await state.clear()
    await message.answer("–§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


@router.message(RegStates.edit_birthday)
async def edit_birthday(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        b = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return

    async with db.pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET birthday = $1 WHERE telegram_id = $2",
            b,
            message.from_user.id,
        )
    await state.clear()
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@router.message(RegStates.edit_wish)
async def edit_wish(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π"""
    async with db.pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET wish = $1 WHERE telegram_id = $2",
            message.text,
            message.from_user.id,
        )
    await state.clear()
    await message.answer("–ü–æ–∂–µ–ª–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ---
@router.message(Command("users"))
async def show_users(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with db.pool.acquire() as conn:
        users = await conn.fetch(
            "SELECT id, full_name, birthday, wish, telegram_id, is_admin, ward_id, giver_id FROM users ORDER BY id"
        )

    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return

    text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for u in users:
        text += (
            f"ID: {u['id']}\n–§–ò–û: {u['full_name']}\n"
            f"–î–†: {format_bday(u['birthday'])}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {u['wish']}\n"
            f"TG: {u['telegram_id']}\n–ê–¥–º–∏–Ω: {int(u['is_admin'])}\n"
            f"–ü–æ–¥–æ–ø–µ—á–Ω—ã–π: {u['ward_id']}\n–î–∞—Ä–∏—Ç–µ–ª—å: {u['giver_id']}\n---\n"
        )

    await message.answer(text)


@router.message(Command("pairs"))
async def show_pairs(message: types.Message):
    """–¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä –¥–∞—Ä–∏—Ç–µ–ª—å-–ø–æ–¥–æ–ø–µ—á–Ω—ã–π"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        async with db.pool.acquire() as conn:
            pairs = await conn.fetch(
                """
                SELECT
                    g.id AS giver_id,
                    g.telegram_id AS giver_telegram_id,
                    g.full_name AS giver_name,
                    w.id AS ward_id,
                    w.telegram_id AS ward_telegram_id,
                    w.full_name AS ward_name,
                    w.birthday AS ward_birthday
                FROM
                    users g
                JOIN
                    users w ON g.ward_id = w.id
                ORDER BY
                    w.birthday
            """
            )

            if not pairs:
                await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–∞—Ä–∏—Ç–µ–ª—å-–ø–æ–¥–æ–ø–µ—á–Ω—ã–π.")
                return

            text = "<b>–¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä –¥–∞—Ä–∏—Ç–µ–ª—å ‚Üí –ø–æ–¥–æ–ø–µ—á–Ω—ã–π:</b>\n\n"

            for i, pair in enumerate(pairs, 1):
                ward_bday = pair["ward_birthday"]
                bday_formatted = (
                    ward_bday.strftime("%d.%m.%Y") if ward_bday else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                )

                text += (
                    f"{i}. <b>–î–∞—Ä–∏—Ç–µ–ª—å:</b> {pair['giver_name']} (ID: {pair['giver_telegram_id']})\n"
                    f"   <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π:</b> {pair['ward_name']} (ID: {pair['ward_telegram_id']})\n"
                    f"   <b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:</b> {bday_formatted}\n\n"
                )

            if len(text) > 4000:
                parts = [text[i : i + 4000] for i in range(0, len(text), 4000)]
                for part in parts:
                    await message.answer(part, parse_mode="HTML")
            else:
                await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("random"))
async def random_distribution(message: types.Message):
    """–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        async with db.pool.acquire() as conn:
            users = await conn.fetch("SELECT id FROM users ORDER BY id")

            if len(users) < 2:
                await message.answer(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)."
                )
                return

            user_ids = [user["id"] for user in users]
            shuffled_ids = user_ids.copy()
            random.shuffle(shuffled_ids)

            pairs = []
            for i in range(len(shuffled_ids)):
                giver_id = shuffled_ids[i]
                ward_id = shuffled_ids[(i + 1) % len(shuffled_ids)]
                pairs.append((giver_id, ward_id))

            for giver_id, ward_id in pairs:
                await conn.execute(
                    "UPDATE users SET ward_id = $1 WHERE id = $2", ward_id, giver_id
                )
                await conn.execute(
                    "UPDATE users SET giver_id = $1 WHERE id = $2", giver_id, ward_id
                )

            logging.info(f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—Ä—É–≥—É: {shuffled_ids}")

            await clear_all_reminders()
            await schedule_all_reminders()

            await message.answer(
                f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã {len(pairs)} –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
            )

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") @ router.message(
            Command("set")
        )


async def set_pair(message: types.Message):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã –≤—Ä—É—á–Ω—É—é –ø–æ ID"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set [giver_id] [ward_id]")
        return

    try:
        giver_id = int(parts[1])
        ward_id = int(parts[2])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    async with db.pool.acquire() as conn:
        giver = await conn.fetchrow("SELECT id FROM users WHERE id = $1", giver_id)
        ward = await conn.fetchrow("SELECT id FROM users WHERE id = $1", ward_id)

        if not giver:
            await message.answer(f"–î–∞—Ä–∏—Ç–µ–ª—å —Å ID {giver_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if not ward:
            await message.answer(f"–ü–æ–¥–æ–ø–µ—á–Ω—ã–π —Å ID {ward_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await conn.execute(
            "UPDATE users SET ward_id = $1 WHERE id = $2", ward_id, giver_id
        )
        await conn.execute(
            "UPDATE users SET giver_id = $1 WHERE id = $2", giver_id, ward_id
        )

    await clear_all_reminders()
    await schedule_all_reminders()

    await message.answer(
        f"–ü–∞—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: –î–∞—Ä–∏—Ç–µ–ª—å #{giver_id} ‚Üí –ü–æ–¥–æ–ø–µ—á–Ω—ã–π #{ward_id}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    )


@router.message(Command("set_name"))
async def set_pair_by_name(message: types.Message):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—ã –≤—Ä—É—á–Ω—É—é –ø–æ –§–ò–û"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    cmd_parts = message.text.split(maxsplit=1)
    if len(cmd_parts) < 2:
        await message.answer(
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_name "–§–ò–û –¥–∞—Ä–∏—Ç–µ–ª—è" "–§–ò–û –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"'
        )
        return

    full_text = cmd_parts[1].strip()

    if '"' in full_text:
        import re

        names = re.findall(r'"([^"]*)"', full_text)
        if len(names) < 2:
            await message.answer(
                '–£–∫–∞–∂–∏—Ç–µ –§–ò–û –¥–∞—Ä–∏—Ç–µ–ª—è –∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö: /set_name "–§–ò–û –¥–∞—Ä–∏—Ç–µ–ª—è" "–§–ò–û –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"'
            )
            return
        giver_name, ward_name = names[0], names[1]
    else:
        async with db.pool.acquire() as conn:
            all_users = await conn.fetch("SELECT id, full_name FROM users")

        possible_givers = []
        possible_wards = []

        for user in all_users:
            if user["full_name"].lower() in full_text.lower():
                if not possible_givers:
                    possible_givers.append(user)
                elif not possible_wards:
                    possible_wards.append(user)

        if not possible_givers or not possible_wards:
            await message.answer(
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ä–∏—Ç–µ–ª—è –∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏: /set_name "–§–ò–û –¥–∞—Ä–∏—Ç–µ–ª—è" "–§–ò–û –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"'
            )
            return

        giver_name = possible_givers[0]["full_name"]
        ward_name = possible_wards[0]["full_name"]

    async with db.pool.acquire() as conn:
        giver = await conn.fetchrow(
            "SELECT id FROM users WHERE full_name = $1", giver_name
        )
        ward = await conn.fetchrow(
            "SELECT id FROM users WHERE full_name = $1", ward_name
        )

        if not giver:
            await message.answer(f'–î–∞—Ä–∏—Ç–µ–ª—å —Å –§–ò–û "{giver_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        if not ward:
            await message.answer(f'–ü–æ–¥–æ–ø–µ—á–Ω—ã–π —Å –§–ò–û "{ward_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        giver_id = giver["id"]
        ward_id = ward["id"]

        await conn.execute(
            "UPDATE users SET ward_id = $1 WHERE id = $2", ward_id, giver_id
        )
        await conn.execute(
            "UPDATE users SET giver_id = $1 WHERE id = $2", giver_id, ward_id
        )

    await clear_all_reminders()
    await schedule_all_reminders()

    await message.answer(
        f'–ü–∞—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: –î–∞—Ä–∏—Ç–µ–ª—å "{giver_name}" ‚Üí –ü–æ–¥–æ–ø–µ—á–Ω—ã–π "{ward_name}". –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
    )


@router.message(Command("make_admin"))
async def make_admin_command(message: types.Message):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /make_admin [telegram_id]")
        return

    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT id FROM users WHERE telegram_id = $1", telegram_id
        )

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await conn.execute(
            "UPDATE users SET is_admin = true WHERE telegram_id = $1", telegram_id
        )

    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )


@router.message(Command("delete"))
async def delete_user(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete [telegram_id]")
        return

    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if telegram_id == message.from_user.id:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT id, ward_id, giver_id FROM users WHERE telegram_id = $1",
            telegram_id,
        )

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        ward_id = user["ward_id"]
        giver_id = user["giver_id"]

        if ward_id:
            await conn.execute(
                "UPDATE users SET giver_id = NULL WHERE id = $1", ward_id
            )
        if giver_id:
            await conn.execute(
                "UPDATE users SET ward_id = NULL WHERE id = $1", giver_id
            )

        await conn.execute("DELETE FROM users WHERE telegram_id = $1", telegram_id)

    await clear_all_reminders()
    await schedule_all_reminders()

    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–¥–∞–ª–µ–Ω. –°–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã."
    )


@router.message(Command("admin_revoke"))
async def revoke_admin_rights(message: types.Message):
    """–õ–∏—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_revoke [telegram_id]")
        return

    try:
        telegram_id = int(parts[1])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if telegram_id == message.from_user.id:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT id, is_admin FROM users WHERE telegram_id = $1", telegram_id
        )

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if not user["is_admin"]:
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return

        await conn.execute(
            "UPDATE users SET is_admin = false WHERE telegram_id = $1", telegram_id
        )

    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –ª–∏—à–µ–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )


@router.message(Command("reset"))
async def reset_connections(message: types.Message):
    """–°–±—Ä–æ—Å —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    parts = message.text.split()

    if len(parts) == 1 or parts[1].lower() == "all":
        async with db.pool.acquire() as conn:
            await conn.execute("UPDATE users SET ward_id = NULL, giver_id = NULL")
        await message.answer("–°–≤—è–∑–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")
        await clear_all_reminders()
        return

    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/admin_reset [user_id]` –∏–ª–∏ `/admin_reset all`"
        )
        return

    async with db.pool.acquire() as conn:
        user = await conn.fetchrow(
            "SELECT id, ward_id, giver_id FROM users WHERE id = $1", user_id
        )

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        ward_id = user["ward_id"]
        giver_id = user["giver_id"]

        await conn.execute(
            "UPDATE users SET ward_id = NULL, giver_id = NULL WHERE id = $1", user_id
        )

        if ward_id:
            await conn.execute(
                "UPDATE users SET giver_id = NULL WHERE id = $1", ward_id
            )
        if giver_id:
            await conn.execute(
                "UPDATE users SET ward_id = NULL WHERE id = $1", giver_id
            )

    await clear_all_reminders()
    await schedule_all_reminders()

    await message.answer(
        f"–°–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user_id} –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    )


@router.message(Command("reminders"))
async def show_reminders(message: types.Message):
    """–ü–æ–∫–∞–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    jobs = scheduler.get_jobs()
    if not jobs:
        await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    now = datetime.now(MSK)
    text = "<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"

    for i, job in enumerate(jobs, 1):
        run_date = job.trigger.run_date
        time_diff = run_date - now
        days = time_diff.days
        hours = time_diff.seconds // 3600

        giver_id, ward_id, days_before = job.args

        async with db.pool.acquire() as conn:
            giver_info = await conn.fetchrow(
                "SELECT full_name FROM users WHERE id = $1", giver_id
            )
            ward_info = await conn.fetchrow(
                "SELECT full_name FROM users WHERE id = $1", ward_id
            )

        giver_name = giver_info["full_name"] if giver_info else f"ID: {giver_id}"
        ward_name = ward_info["full_name"] if ward_info else f"ID: {ward_id}"

        text += (
            f"{i}. {run_date.strftime('%d.%m.%Y %H:%M')} (—á–µ—Ä–µ–∑ {days}–¥ {hours}—á)\n"
            f"   –î–∞—Ä–∏—Ç–µ–ª—å: {giver_name}\n"
            f"   –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: {ward_name}\n"
            f"   –ó–∞ {days_before} –¥–Ω–µ–π –¥–æ –î–†\n\n"
        )

    await message.answer(text, parse_mode="HTML")


@router.message(Command("menu"))
async def menu_command(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
    try:
        text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        text += "\n".join(["‚Ä¢ " + c for c in USER_COMMANDS]) + "\n"

        try:
            is_admin_flag = await db.is_admin(message.from_user.id)
            if is_admin_flag:
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
                text += "\n".join(["‚Ä¢ " + c for c in ADMIN_COMMANDS])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞: {e}")

        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ menu: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    try:
        is_admin_flag = await db.is_admin(message.from_user.id)
        text = (
            "üéâ <b>–ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ä–∏—Ç–µ–ª–µ–π –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "<b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.\n"
            "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n"
            "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /me –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ward, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–æ–º—É –≤—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫.\n"
            "5. –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî /edit.\n"
            "6. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ‚Äî /menu.\n"
            "\n"
        )

        if is_admin_flag:
            text += (
                "<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
                + "\n".join(["‚Ä¢ " + c for c in ADMIN_COMMANDS])
                + "\n\n"
            )

        text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –∑–∞ 21, 14, 7, 3 –∏ 1 –¥–µ–Ω—å.\n"
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ===== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====
async def schedule_all_reminders():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await clear_all_reminders()

    async with db.pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT id, birthday, giver_id FROM users WHERE giver_id IS NOT NULL"
        )

    now = datetime.now(MSK)

    for rec in rows:
        user_id = rec["id"]
        bday = rec["birthday"]
        giver_id = rec["giver_id"]

        if not bday or not giver_id:
            continue

        try:
            this_year = date(year=now.year, month=bday.month, day=bday.day)
        except ValueError:
            continue

        if this_year < now.date():
            try:
                this_year = date(year=now.year + 1, month=bday.month, day=bday.day)
            except ValueError:
                continue

        for days_before in REMINDER_OFFSETS:
            remind_date = this_year - timedelta(days=days_before)
            remind_dt = datetime.combine(remind_date, time(12, 0))
            remind_dt = MSK.localize(remind_dt)

            if remind_dt > now:
                scheduler.add_job(
                    send_reminder,
                    DateTrigger(run_date=remind_dt),
                    args=[giver_id, user_id, days_before],
                )


async def send_reminder(giver_id: int, ward_id: int, days_before: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    async with db.pool.acquire() as conn:
        ward = await conn.fetchrow(
            "SELECT full_name, birthday, wish FROM users WHERE id = $1", ward_id
        )
        giver = await conn.fetchrow(
            "SELECT telegram_id FROM users WHERE id = $1", giver_id
        )

    if not ward or not giver:
        return

    text = (
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ {ward['full_name']} –æ—Å—Ç–∞–ª–æ—Å—å {days_before} –¥–Ω.\n"
        f"–î–†: {format_bday(ward['birthday'])}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {ward['wish']}"
    )

    try:
        await bot.send_message(giver["telegram_id"], text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def clear_all_reminders():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    for job in scheduler.get_jobs():
        try:
            job.remove()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è job: {e}")


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
dp.include_router(router)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await db.init()
    scheduler.start()
    await schedule_all_reminders()

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–∏–Ω–≥–∞
    await bot.delete_webhook(drop_pending_updates=True)

    try:
        await dp.start_polling(bot)
    finally:
        await clear_all_reminders()
        await db.close()
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
