name: Build, publish and deploy docker

on:
  push:
    branches: ['main']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            type=raw,value=test,enable=${{ github.event_name == 'push' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-testing:
    name: Deploy to Testing
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment:
      name: testing
    env:
      CONTAINER_NAME: tgbot_birthday_test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to testing
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          API_TOKEN: ${{ secrets.TEST_API_TOKEN }}
        run: |
          # Pull the new image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
          
          # Run database migrations
          docker run --rm \
            --env DATABASE_URL="$DATABASE_URL" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test \
            alembic upgrade head
          
          # Stop and remove old container if exists
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          
          # Run new container
          docker run -d --name $CONTAINER_NAME \
            --restart unless-stopped \
            --env DATABASE_URL="$DATABASE_URL" \
            --env API_TOKEN="$API_TOKEN" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

  deploy-production:
    name: Deploy to Production
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment:
      name: production
    env:
      CONTAINER_NAME: tgbot_birthday_prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          API_TOKEN: ${{ secrets.PROD_API_TOKEN }}
        run: |
          # Pull the new image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run database migrations
          docker run --rm \
            --env DATABASE_URL="$DATABASE_URL" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            alembic upgrade head
          
          # Stop and remove old container if exists
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          
          # Run new container
          docker run -d --name $CONTAINER_NAME \
            --restart unless-stopped \
            --env DATABASE_URL="$DATABASE_URL" \
            --env API_TOKEN="$API_TOKEN" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest